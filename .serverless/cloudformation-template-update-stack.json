{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "WatchCrudFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/watch_crud_function"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "aws-graphql-crud-appsync",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/watch_crud_function:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/watch_crud_function:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "aws-graphql-crud-appsync",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "WatchCrudFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-graphql-crud-appsync/dev/1675930821494-2023-02-09T08:20:21.494Z/watchCrudFunction.zip"
        },
        "Handler": "watch_function.handler",
        "Runtime": "nodejs16.x",
        "FunctionName": "watch_crud_function",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "WatchCrudFunctionIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WatchCrudFunctionIamRoleLambdaExecution",
        "WatchCrudFunctionLogGroup"
      ]
    },
    "WatchCrudFunctionLambdaVersionqWNSRPmS9zIWT5CQsWCKeHrcTj6Dn6Leo3wPiqOA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WatchCrudFunctionLambdaFunction"
        },
        "CodeSha256": "N6peWZiDW8rR6d+fob4x5b19ZqBob3kGD8o4FpXG1Z8="
      }
    },
    "WatchCrudFunctionIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "aws-graphql-crud-appsync",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/watch_crud_function:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:PutItem"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:dynamodb:us-east-1:${AWS::AccountId}:table/watches"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "aws-graphql-crud-appsync",
              "dev",
              "watchCrudFunction",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "watchTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "watches",
        "AttributeDefinitions": [
          {
            "AttributeName": "watch_id",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "watch_id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 3,
          "WriteCapacityUnits": 3
        }
      }
    },
    "GraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "aws_graphql_crud_appsync_api",
        "AuthenticationType": "API_KEY",
        "AdditionalAuthenticationProviders": [],
        "XrayEnabled": false
      }
    },
    "GraphQlApiKeySomeApiKey": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Description": "My Api Key",
        "Expires": 1678521600
      }
    },
    "GraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "type Watch {\n  watch_id: Int\n  name: String\n  brand: String\n  category: String\n  price: Int\n  description: String\n}\n\ntype Response {\n  response: Boolean\n}\n\ntype Mutation {\n  addWatch(name: String, brand: String, price: Int, category: String, description: String): Watch\n  deleteWatch(watch_id: ID!): Response\n}\n\ntype Query {\n  getWatches: [Watch]\n  getWatch(watch_id: Int!): Watch\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}",
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "GraphQlDsawsLambdaWatchFunRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsawsLambdaWatchFunPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "lambda:invokeFunction"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "WatchCrudFunctionLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "WatchCrudFunctionLambdaFunction",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsawsLambdaWatchFun": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "awsLambdaWatch_Fun",
        "Description": "Lambda DataSources",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsawsLambdaWatchFunRole",
            "Arn"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "WatchCrudFunctionLambdaFunction",
              "Arn"
            ]
          }
        }
      }
    },
    "GraphQlResolverQuerygetWatches": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getWatches",
        "RequestMappingTemplate": "{\r\n    \"version\": \"2017-02-28\",\r\n    \"operation\": \"Invoke\",\r\n    \"payload\": {\r\n        \"field\": \"getWatches\",\r\n    }\r\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsawsLambdaWatchFun",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetWatch": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getWatch",
        "RequestMappingTemplate": "{\r\n    \"version\": \"2017-02-28\",\r\n    \"operation\": \"Invoke\",\r\n    \"payload\": {\r\n        \"field\": \"getWatch\",\r\n        \"arguments\": $utils.toJson($context.arguments)\r\n    }\r\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsawsLambdaWatchFun",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationaddWatch": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addWatch",
        "RequestMappingTemplate": "{\r\n    \"version\": \"2017-02-28\",\r\n    \"operation\": \"Invoke\",\r\n    \"payload\": {\r\n        \"field\": \"addWatch\",\r\n        \"arguments\": $utils.toJson($context.arguments)\r\n    }\r\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsawsLambdaWatchFun",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationdeleteWatch": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "deleteWatch",
        "RequestMappingTemplate": "{\r\n    \"version\": \"2017-02-28\",\r\n    \"operation\": \"Invoke\",\r\n    \"payload\": {\r\n        \"field\": \"deleteWatch\",\r\n        \"arguments\": $utils.toJson($context.arguments)\r\n    }\r\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsawsLambdaWatchFun",
            "Name"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-aws-graphql-crud-appsync-dev-ServerlessDeploymentBucketName"
      }
    },
    "WatchCrudFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WatchCrudFunctionLambdaVersionqWNSRPmS9zIWT5CQsWCKeHrcTj6Dn6Leo3wPiqOA"
      },
      "Export": {
        "Name": "sls-aws-graphql-crud-appsync-dev-WatchCrudFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GraphQlApiKeySomeApiKey": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApiKeySomeApiKey",
          "ApiKey"
        ]
      }
    },
    "GraphQlApiId": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "ApiId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-GraphQlApiId"
        }
      }
    },
    "GraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "GraphQLUrl"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-GraphQlApiUrl"
        }
      }
    }
  }
}